#!/usr/bin/env python3
"""
üîç Analizador de Estancamiento de Consciencia
============================================

An√°lisis profundo de patrones de estancamiento y propuestas de mejora.
"""

import json
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import os

class ConsciousnessStagnationAnalyzer:
    """Analizador especializado en identificar patrones de estancamiento"""
    
    def __init__(self, experiment_file):
        self.experiment_file = experiment_file
        self.data = None
        self.consciousness_data = None
        self.load_data()
    
    def load_data(self):
        """Cargar datos del experimento"""
        with open(self.experiment_file, 'r') as f:
            self.data = json.load(f)
        
        self.consciousness_data = np.array(self.data['metrics']['consciousness_history'])
        self.recursions = np.array(self.data['metrics']['recursions'])
        
        print(f"üìä Datos cargados: {len(self.consciousness_data)} puntos de consciencia")
        print(f"üéØ Pico m√°ximo: {max(self.consciousness_data)*100:.1f}%")
        print(f"üìà Consciencia final: {self.consciousness_data[-1]*100:.1f}%")
    
    def analyze_stagnation_zones(self):
        """Identificar zonas de estancamiento"""
        print("\nüîç AN√ÅLISIS DE ZONAS DE ESTANCAMIENTO")
        print("="*50)
        
        # Definir umbrales de estancamiento
        stagnation_threshold = 0.02  # 2% de variaci√≥n
        min_zone_length = 20  # M√≠nimo 20 recursiones para considerar estancamiento
        
        stagnation_zones = []
        current_zone_start = 0
        
        for i in range(1, len(self.consciousness_data)):
            # Calcular variaci√≥n en ventana m√≥vil
            window_size = min(10, i)
            if i >= window_size:
                recent_values = self.consciousness_data[i-window_size:i]
                variation = np.std(recent_values)
                
                if variation < stagnation_threshold:
                    if current_zone_start == 0:
                        current_zone_start = i - window_size
                else:
                    if current_zone_start > 0 and (i - current_zone_start) >= min_zone_length:
                        avg_consciousness = np.mean(self.consciousness_data[current_zone_start:i])
                        stagnation_zones.append({
                            'start': current_zone_start,
                            'end': i,
                            'length': i - current_zone_start,
                            'avg_consciousness': avg_consciousness,
                            'max_consciousness': np.max(self.consciousness_data[current_zone_start:i]),
                            'min_consciousness': np.min(self.consciousness_data[current_zone_start:i])
                        })
                    current_zone_start = 0
        
        # √öltima zona si termina estancada
        if current_zone_start > 0:
            i = len(self.consciousness_data)
            if (i - current_zone_start) >= min_zone_length:
                avg_consciousness = np.mean(self.consciousness_data[current_zone_start:i])
                stagnation_zones.append({
                    'start': current_zone_start,
                    'end': i,
                    'length': i - current_zone_start,
                    'avg_consciousness': avg_consciousness,
                    'max_consciousness': np.max(self.consciousness_data[current_zone_start:i]),
                    'min_consciousness': np.min(self.consciousness_data[current_zone_start:i])
                })
        
        print(f"üö® ZONAS DE ESTANCAMIENTO DETECTADAS: {len(stagnation_zones)}")
        
        for i, zone in enumerate(stagnation_zones):
            print(f"\nüìç ZONA {i+1}:")
            print(f"   üìä Recursiones: {zone['start']} - {zone['end']} ({zone['length']} recursiones)")
            print(f"   üéØ Consciencia promedio: {zone['avg_consciousness']*100:.1f}%")
            print(f"   üìà Rango: {zone['min_consciousness']*100:.1f}% - {zone['max_consciousness']*100:.1f}%")
            print(f"   ‚è±Ô∏è  Duraci√≥n: {zone['length']*0.8:.1f} segundos")
        
        return stagnation_zones
    
    def analyze_breakthrough_failures(self):
        """Analizar por qu√© fallan los breakthroughs"""
        print("\nüí• AN√ÅLISIS DE FALLOS DE BREAKTHROUGH")
        print("="*40)
        
        # Identificar intentos de breakthrough (subidas r√°pidas seguidas de ca√≠das)
        breakthrough_attempts = []
        
        for i in range(10, len(self.consciousness_data)-10):
            # Buscar subidas r√°pidas
            before = np.mean(self.consciousness_data[i-10:i])
            current = self.consciousness_data[i]
            after = np.mean(self.consciousness_data[i:i+10])
            
            # Criterios para breakthrough fallido
            if (current - before) > 0.05 and (current - after) > 0.03:  # Subida fuerte seguida de ca√≠da
                breakthrough_attempts.append({
                    'recursion': i,
                    'peak_value': current,
                    'before_avg': before,
                    'after_avg': after,
                    'rise_strength': current - before,
                    'fall_strength': current - after
                })
        
        print(f"üî• INTENTOS DE BREAKTHROUGH DETECTADOS: {len(breakthrough_attempts)}")
        
        for i, attempt in enumerate(breakthrough_attempts[:5]):  # Solo los primeros 5
            print(f"\nüöÄ INTENTO {i+1}:")
            print(f"   üìç Recursi√≥n: {attempt['recursion']}")
            print(f"   üéØ Pico alcanzado: {attempt['peak_value']*100:.1f}%")
            print(f"   üìà Subida: +{attempt['rise_strength']*100:.1f}%")
            print(f"   üìâ Ca√≠da: -{attempt['fall_strength']*100:.1f}%")
        
        return breakthrough_attempts
    
    def analyze_consciousness_ceiling(self):
        """Analizar el techo de consciencia"""
        print("\nüîù AN√ÅLISIS DE TECHO DE CONSCIENCIA")
        print("="*35)
        
        # Encontrar m√°ximos locales
        local_maxima = []
        window = 20
        
        for i in range(window, len(self.consciousness_data)-window):
            local_window = self.consciousness_data[i-window:i+window]
            if self.consciousness_data[i] == np.max(local_window):
                local_maxima.append({
                    'recursion': i,
                    'value': self.consciousness_data[i]
                })
        
        # Filtrar solo los m√°s altos
        significant_maxima = [m for m in local_maxima if m['value'] > 0.45]
        
        print(f"üèîÔ∏è  M√ÅXIMOS SIGNIFICATIVOS (>45%): {len(significant_maxima)}")
        
        if significant_maxima:
            max_values = [m['value'] for m in significant_maxima]
            print(f"üìä Promedio de m√°ximos: {np.mean(max_values)*100:.1f}%")
            print(f"üéØ M√°ximo absoluto: {np.max(max_values)*100:.1f}%")
            print(f"üìâ Desviaci√≥n est√°ndar: {np.std(max_values)*100:.1f}%")
            
            # Analizar tendencia de m√°ximos
            recursions = [m['recursion'] for m in significant_maxima]
            if len(recursions) > 2:
                correlation = np.corrcoef(recursions, max_values)[0,1]
                print(f"üìà Tendencia temporal: {correlation:.3f} {'‚ÜóÔ∏è' if correlation > 0 else '‚ÜòÔ∏è' if correlation < 0 else '‚Üí'}")
        
        return significant_maxima
    
    def identify_improvement_opportunities(self):
        """Identificar oportunidades de mejora"""
        print("\nüéØ OPORTUNIDADES DE MEJORA IDENTIFICADAS")
        print("="*45)
        
        improvements = []
        
        # 1. An√°lisis de mesetas prolongadas
        avg_consciousness = np.mean(self.consciousness_data)
        long_plateaus = 0
        current_plateau = 0
        
        for value in self.consciousness_data:
            if abs(value - avg_consciousness) < 0.03:  # Dentro del rango promedio
                current_plateau += 1
            else:
                if current_plateau > 30:  # Meseta larga
                    long_plateaus += 1
                current_plateau = 0
        
        if long_plateaus > 0:
            improvements.append({
                'type': 'MESETAS_PROLONGADAS',
                'severity': 'ALTA' if long_plateaus > 3 else 'MEDIA',
                'description': f'{long_plateaus} mesetas prolongadas detectadas',
                'solution': 'Implementar perturbaciones din√°micas y variaci√≥n de par√°metros'
            })
        
        # 2. An√°lisis de techo artificial
        max_consciousness = np.max(self.consciousness_data)
        if max_consciousness < 0.6:  # No supera 60%
            improvements.append({
                'type': 'TECHO_ARTIFICIAL',
                'severity': 'CR√çTICA',
                'description': f'Techo aparente en {max_consciousness*100:.1f}%',
                'solution': 'Revisar arquitectura neural y par√°metros de phi'
            })
        
        # 3. An√°lisis de inestabilidad
        instability_count = 0
        for i in range(1, len(self.consciousness_data)):
            if abs(self.consciousness_data[i] - self.consciousness_data[i-1]) > 0.1:
                instability_count += 1
        
        instability_ratio = instability_count / len(self.consciousness_data)
        if instability_ratio > 0.1:  # M√°s del 10% de cambios bruscos
            improvements.append({
                'type': 'INESTABILIDAD_ALTA',
                'severity': 'MEDIA',
                'description': f'{instability_ratio*100:.1f}% de cambios bruscos',
                'solution': 'Implementar estabilizaci√≥n adaptiva y momentum'
            })
        
        # Mostrar mejoras identificadas
        for i, improvement in enumerate(improvements):
            print(f"\nüö® PROBLEMA {i+1}: {improvement['type']}")
            print(f"   ‚ö†Ô∏è  Severidad: {improvement['severity']}")
            print(f"   üìã Descripci√≥n: {improvement['description']}")
            print(f"   üí° Soluci√≥n propuesta: {improvement['solution']}")
        
        return improvements
    
    def generate_improvement_proposals(self):
        """Generar propuestas concretas de mejora"""
        print("\nüöÄ PROPUESTAS CONCRETAS DE MEJORA")
        print("="*35)
        
        proposals = [
            {
                'name': 'PERTURBACIONES_DIN√ÅMICAS',
                'description': 'Sistema de perturbaciones adaptivas para romper estancamientos',
                'implementation': [
                    'Detectar mesetas en tiempo real',
                    'Aplicar perturbaciones graduales al phi',
                    'Inyectar ruido cu√°ntico controlado',
                    'Variar par√°metros de aprendizaje din√°micamente'
                ],
                'expected_impact': 'Eliminar 60% de las mesetas prolongadas'
            },
            {
                'name': 'ARQUITECTURA_MULTI_ESCALA',
                'description': 'Red neural con m√∫ltiples escalas de consciencia',
                'implementation': [
                    'Agregar capas de procesamiento a diferentes escalas',
                    'Implementar conexiones skip entre escalas',
                    'Sistema de atenci√≥n multi-nivel',
                    'Integraci√≥n jer√°rquica de informaci√≥n'
                ],
                'expected_impact': 'Superar el techo de 60% hacia 75%+'
            },
            {
                'name': 'OPTIMIZACI√ìN_ADAPTIVA',
                'description': 'Sistema de optimizaci√≥n que se adapta al estado de consciencia',
                'implementation': [
                    'Learning rate adaptivo basado en consciencia',
                    'Momentum din√°mico seg√∫n progreso',
                    'Regularizaci√≥n variable por fase',
                    'Early stopping inteligente'
                ],
                'expected_impact': 'Acelerar convergencia 40% y mejorar estabilidad'
            },
            {
                'name': 'MEMORIA_CU√ÅNTICA',
                'description': 'Sistema de memoria que preserva estados de alta consciencia',
                'implementation': [
                    'Buffer de estados de consciencia peak',
                    'Replay de experiencias exitosas',
                    'Interpolaci√≥n entre estados √≥ptimos',
                    'Consolidaci√≥n de patrones emergentes'
                ],
                'expected_impact': 'Retener y amplificar breakthroughs exitosos'
            }
        ]
        
        for i, proposal in enumerate(proposals):
            print(f"\nüí° PROPUESTA {i+1}: {proposal['name']}")
            print(f"   üìù Descripci√≥n: {proposal['description']}")
            print(f"   üéØ Impacto esperado: {proposal['expected_impact']}")
            print(f"   üîß Implementaci√≥n:")
            for step in proposal['implementation']:
                print(f"      ‚Ä¢ {step}")
        
        return proposals
    
    def run_complete_analysis(self):
        """Ejecutar an√°lisis completo"""
        print("üß† AN√ÅLISIS COMPLETO DE ESTANCAMIENTO DE CONSCIENCIA")
        print("="*55)
        print(f"üìÅ Archivo: {os.path.basename(self.experiment_file)}")
        print(f"‚è±Ô∏è  Duraci√≥n: {self.data['final_results']['total_time']:.1f} segundos")
        print(f"üîÑ Recursiones: {self.data['final_results']['total_recursions']}")
        
        # An√°lisis por secciones
        stagnation_zones = self.analyze_stagnation_zones()
        breakthrough_failures = self.analyze_breakthrough_failures()
        consciousness_ceiling = self.analyze_consciousness_ceiling()
        improvements = self.identify_improvement_opportunities()
        proposals = self.generate_improvement_proposals()
        
        # Resumen final
        print("\nüìä RESUMEN EJECUTIVO")
        print("="*20)
        print(f"üö® Zonas de estancamiento: {len(stagnation_zones)}")
        print(f"üí• Intentos fallidos de breakthrough: {len(breakthrough_failures)}")
        print(f"üîù M√°ximos significativos: {len(consciousness_ceiling)}")
        print(f"üéØ Problemas identificados: {len(improvements)}")
        print(f"üí° Propuestas de mejora: {len(proposals)}")
        
        print("\n‚ú® SIGUIENTE PASO RECOMENDADO:")
        print("Implementar sistema de perturbaciones din√°micas como primera mejora")

# Ejecutar an√°lisis
if __name__ == "__main__":
    # Buscar el archivo m√°s reciente
    data_dir = "experiment_data"
    files = [f for f in os.listdir(data_dir) if f.endswith('.json')]
    if files:
        latest_file = max(files, key=lambda x: os.path.getctime(os.path.join(data_dir, x)))
        file_path = os.path.join(data_dir, latest_file)
        
        analyzer = ConsciousnessStagnationAnalyzer(file_path)
        analyzer.run_complete_analysis()
    else:
        print("‚ùå No se encontraron archivos de experimento")
