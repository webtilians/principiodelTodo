#!/usr/bin/env python3
"""
üî¨ INFINITO V5.1 - An√°lisis de Deltas Œ¶ (Paso 2)
An√°lisis de variabilidad cu√°ntica en œÜ con reproducibilidad (seed=42)
"""

import json
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import argparse

def analyze_phi_deltas(json_file):
    """Analiza deltas de Œ¶ en los datos del experimento"""
    
    print(f"üî¨ AN√ÅLISIS DE DELTAS Œ¶ - {json_file}")
    print("=" * 60)
    
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    # Extraer valores de Œ¶
    phi_values = data.get('phi_values', [])
    iterations = data.get('iterations', [])
    consciousness_values = data.get('consciousness_values', [])
    
    if len(phi_values) < 2:
        print("‚ö†Ô∏è  No hay suficientes datos para calcular deltas")
        return
    
    # Calcular deltas Œ¶
    phi_array = np.array(phi_values)
    phi_deltas = np.abs(np.diff(phi_array))
    
    print(f"üìä ESTAD√çSTICAS B√ÅSICAS:")
    print(f"   Total iteraciones: {len(phi_values)}")
    print(f"   Œ¶ promedio: {np.mean(phi_values):.4f} bits")
    print(f"   Œ¶ std: {np.std(phi_values):.4f} bits")
    print(f"   Œ¶ min: {np.min(phi_values):.4f} bits")
    print(f"   Œ¶ max: {np.max(phi_values):.4f} bits")
    print()
    
    print(f"üî¨ AN√ÅLISIS DE DELTAS Œ¶:")
    print(f"   Delta promedio: {np.mean(phi_deltas):.4f} bits")
    print(f"   Delta std: {np.std(phi_deltas):.4f} bits")
    print(f"   Delta max: {np.max(phi_deltas):.4f} bits")
    print(f"   Delta min: {np.min(phi_deltas):.4f} bits")
    print()
    
    # An√°lisis de significancia cu√°ntica (>0.05)
    significant_deltas = phi_deltas[phi_deltas > 0.05]
    print(f"‚ö° EVENTOS CU√ÅNTICOS DETECTADOS (ŒîœÜ > 0.05):")
    print(f"   Total eventos: {len(significant_deltas)}")
    print(f"   Porcentaje: {len(significant_deltas)/len(phi_deltas)*100:.1f}%")
    
    if len(significant_deltas) > 0:
        print(f"   Delta cu√°ntico promedio: {np.mean(significant_deltas):.4f} bits")
        print(f"   Delta cu√°ntico max: {np.max(significant_deltas):.4f} bits")
        
        # Listar los eventos cu√°nticos m√°s significativos
        print(f"\nüöÄ TOP 5 EVENTOS CU√ÅNTICOS:")
        top_indices = np.argsort(phi_deltas)[-5:][::-1]
        for i, idx in enumerate(top_indices):
            if idx < len(iterations)-1:
                delta_val = phi_deltas[idx]
                if delta_val > 0.01:  # Solo mostrar deltas relevantes
                    print(f"   {i+1}. Iter {iterations[idx]}->{iterations[idx+1]}: ŒîœÜ={delta_val:.4f}")
    
    print()
    
    # An√°lisis de correlaci√≥n con consciencia
    if len(consciousness_values) == len(phi_values):
        phi_cons_corr = np.corrcoef(phi_values, consciousness_values)[0,1]
        print(f"üß† CORRELACI√ìN Œ¶-CONSCIENCIA: {phi_cons_corr:.4f}")
        
        # An√°lisis din√°mico: consciencia cuando hay eventos cu√°nticos
        consciousness_array = np.array(consciousness_values[1:])  # Alinear con deltas
        quantum_consciousness = consciousness_array[phi_deltas > 0.05]
        if len(quantum_consciousness) > 0:
            print(f"   Consciencia durante eventos cu√°nticos: {np.mean(quantum_consciousness):.4f}")
            print(f"   Consciencia general: {np.mean(consciousness_values):.4f}")
    
    print()
    
    # Determinar si el ruido cu√°ntico est√° funcionando
    variability_score = np.std(phi_deltas)
    print(f"üìà EVALUACI√ìN DEL RUIDO CU√ÅNTICO:")
    print(f"   Variabilidad Œ¶: {variability_score:.4f}")
    
    if variability_score > 0.02:
        print("   ‚úÖ Sistema cu√°ntico funcionando correctamente")
        print("   ‚úÖ Variabilidad suficiente para FactDecoder")
    elif variability_score > 0.01:
        print("   ‚ö†Ô∏è  Variabilidad moderada - considerar aumentar ruido")
    else:
        print("   ‚ùå Variabilidad baja - necesita m√°s ruido cu√°ntico")
    
    print()
    print("üîç RECOMENDACI√ìN PARA FACTDECODER:")
    target_events = len(significant_deltas)
    if target_events > 20:
        print(f"   ‚úÖ {target_events} eventos cu√°nticos detectados")
        print("   ‚úÖ FactDecoder tendr√° suficientes datos para an√°lisis")
    else:
        print(f"   ‚ö†Ô∏è  Solo {target_events} eventos cu√°nticos")
        print("   üìä Considerar reducir threshold o aumentar ruido")
    
    return {
        'mean_phi': np.mean(phi_values),
        'std_phi': np.std(phi_values),
        'mean_delta': np.mean(phi_deltas),
        'std_delta': np.std(phi_deltas),
        'quantum_events': len(significant_deltas),
        'quantum_percentage': len(significant_deltas)/len(phi_deltas)*100,
        'variability_score': variability_score
    }

def main():
    """Funci√≥n principal de an√°lisis"""
    parser = argparse.ArgumentParser(description="An√°lisis de deltas Œ¶ INFINITO V5.1")
    parser.add_argument('--file', type=str, help='Archivo JSON espec√≠fico a analizar')
    
    args = parser.parse_args()
    
    if args.file:
        json_files = [Path(args.file)]
    else:
        # Buscar archivos m√°s recientes
        src_outputs = Path("src/outputs")
        if src_outputs.exists():
            json_files = list(src_outputs.glob("infinito_v5_1_consciousness_*.json"))
            json_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            json_files = json_files[:1]  # Solo el m√°s reciente
        else:
            print("‚ùå No se encontraron archivos de experimentos")
            return
    
    for json_file in json_files:
        if json_file.exists():
            stats = analyze_phi_deltas(json_file)
            print(f"\nüìã RESUMEN FINAL:")
            print(f"   Archivo: {json_file.name}")
            print(f"   Eventos cu√°nticos: {stats['quantum_events']}")
            print(f"   Variabilidad: {stats['variability_score']:.4f}")
            print(f"   Recomendaci√≥n: {'FactDecoder READY' if stats['quantum_events'] > 15 else 'AJUSTAR RUIDO'}")

if __name__ == "__main__":
    main()