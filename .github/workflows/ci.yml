name: 🧠 INFINITO CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy
        
    - name: 🎨 Code formatting check
      run: |
        black --check src/ tests/ examples/
        
    - name: 📝 Lint with flake8
      run: |
        flake8 src/ tests/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ examples/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔍 Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: 🧪 Run tests with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing -v
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  consciousness-benchmark:
    name: 🧠 Consciousness Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ⚡ Quick consciousness test
      run: |
        cd examples
        timeout 300 python basic_example.py || echo "Test completed or timed out"
        
    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: consciousness-benchmark-results
        path: outputs/
        if-no-files-found: warn

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
  documentation:
    name: 📚 Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📋 Install doc dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: 📖 Build documentation
      run: |
        # Add documentation build commands here
        echo "Documentation build placeholder"
        
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [test, consciousness-benchmark, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Generate release notes
      id: release_notes
      run: |
        # Extract version from latest commit or tag
        VERSION=$(date +"%Y.%m.%d")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release $VERSION - $(date)" > release_notes.md
        echo "Automated release from main branch" >> release_notes.md
        
    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.release_notes.outputs.version }}
        release_name: INFINITO v${{ steps.release_notes.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
